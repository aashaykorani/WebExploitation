import requests,re,random,sys

url = "http://127.0.0.1/login.html"
temp = 0
data = {
    'uname':'client',
    'pword':'client',
}
proxy = {'http':'http://127.0.0.1:8080'}

with requests.Session() as session:
    # Getting the initial csrftoken
    get_token = session.get(url).headers
    print("Performing Initial GET Request to check for csrf token")
    try:
        csrf = re.search('csrftoken=\w*',get_token['Set-Cookie']).group(0).split('=')
        print('Token Found: {}'.format(csrf[1]))
        temp = 1
        print("\nChecking for correct implementation: ")
        # Making incorrect request to force a 403 error
        error = session.post(url,data=data)
        if error.status_code == 403 and "CSRF" in error.text:
            print("1. Made post requset without passing \'csrfmiddlewaretoken\': Success, received status code {}".format(error.status_code))
        else:
            sys.exit("Incorrect implementation of CSRF")
        # Making correct request to see if we get the session id
        data['csrfmiddlewaretoken']=csrf[1]
        legit_req = session.post(url,data=data,allow_redirects=False)
        new_csrf = re.search('csrftoken=\w*',legit_req.headers['Set-Cookie']).group(0).split('=')
        sessid = re.search('sessionid=\w*',legit_req.headers['Set-Cookie']).group(0).split('=')
        if sessid and new_csrf:
            print("2. Made post requset while passing \'csrfmiddlewaretoken\': Success, received status code {}".format(legit_req.status_code))
            print("\n   New CSRF Token: {} \n   Session ID: {}".format(new_csrf[1],sessid[1]))
        else:
            sys.exit("Incorrect implementation of CSRF")
        print("\nNot vulnerable to CSRF!")
    except:
        # If the token is not Found only then print vulnerable otherwise exit saying incorrect implementation.
        if temp==0:
            print("No Token Found")
            print("\nVulnerable to CSRF!")